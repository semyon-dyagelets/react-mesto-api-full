{"ast":null,"code":"class API {\n  constructor({\n    baseURL,\n    token\n  }) {\n    this._baseURL = baseURL; //this._token = token;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseURL}/users/me`, {\n      method: 'GET',\n      headers: {\n        authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    }).then(this._checkResponse);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseURL}/cards`, {\n      method: 'GET',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  editProfile(data) {\n    return fetch(`${this._baseURL}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  editAvatar(data) {\n    return fetch(`${this._baseURL}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  addCard(data) {\n    return fetch(`${this._baseURL}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(_id) {\n    return fetch(`${this._baseURL}/cards/${_id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  putLike(_id) {\n    return fetch(`${this._baseURL}/cards/likes/${_id}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  deleteLike(_id) {\n    return fetch(`${this._baseURL}/cards/likes/${_id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst api = new API({\n  baseURL: 'http://localhost:3000',\n  token: '368fbfa6-0e9c-41c7-bd15-303b5b8d6ef8'\n});\nexport default api;","map":{"version":3,"sources":["/Users/SD/Desktop/dev/react-mesto-auth/src/utils/api.js"],"names":["API","constructor","baseURL","token","_baseURL","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","headers","authorization","localStorage","getItem","then","getInitialCards","_token","editProfile","data","body","JSON","stringify","name","about","editAvatar","avatar","addCard","link","deleteCard","_id","putLike","deleteLike","api"],"mappings":"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","sourcesContent":["class API {\n    constructor({ baseURL, token }) {\n        this._baseURL = baseURL;\n        //this._token = token;\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    getUserInfo() {\n        return fetch(`${this._baseURL}/users/me`, {\n            method: 'GET',\n            headers: {\n                authorization: `Bearer ${localStorage.getItem('token')}`,\n            }\n        })\n            .then(this._checkResponse)\n    }\n\n    getInitialCards() {\n        return fetch(`${this._baseURL}/cards`, {\n            method: 'GET',\n            headers: {\n                authorization: this._token\n            }\n        })\n            .then(this._checkResponse)\n    }\n\n    editProfile(data) {\n        return fetch(`${this._baseURL}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    editAvatar(data) {\n        return fetch(`${this._baseURL}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: data.avatar,\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    addCard(data) {\n        return fetch(`${this._baseURL}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    deleteCard(_id) {\n        return fetch(`${this._baseURL}/cards/${_id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(this._checkResponse)\n    }\n\n    putLike(_id) {\n        return fetch(`${this._baseURL}/cards/likes/${_id}`, {\n            method: 'PUT',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(this._checkResponse)\n    }\n\n    deleteLike(_id) {\n        return fetch(`${this._baseURL}/cards/likes/${_id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(this._checkResponse)\n    }\n}\n\nconst api = new API({\n    baseURL: 'http://localhost:3000',\n    token: '368fbfa6-0e9c-41c7-bd15-303b5b8d6ef8',\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}