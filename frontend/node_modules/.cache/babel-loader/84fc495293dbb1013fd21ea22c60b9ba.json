{"ast":null,"code":"class API {\n  constructor({\n    baseURL,\n    token\n  }) {\n    this._baseURL = baseURL;\n    this._token = token;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseURL}/users/me`, {\n      method: 'GET',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseURL}/cards`, {\n      method: 'GET',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  editProfile(data) {\n    console.log(data);\n    return fetch(`${this._baseURL}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  editAvatar(data) {\n    return fetch(`${this._baseURL}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  addCard(data) {\n    return fetch(`${this._baseURL}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseURL}/cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  putLike(id) {\n    return fetch(`${this._baseURL}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._baseURL}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst api = new API({\n  baseURL: 'https://mesto.nomoreparties.co/v1/cohort-19',\n  token: '368fbfa6-0e9c-41c7-bd15-303b5b8d6ef8'\n});\nexport default api;","map":{"version":3,"sources":["/Users/SD/Desktop/dev/mesto-react/src/utils/api.js"],"names":["API","constructor","baseURL","token","_baseURL","_token","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","headers","authorization","then","getInitialCards","editProfile","data","console","log","body","JSON","stringify","name","about","editAvatar","avatar","addCard","link","deleteCard","id","putLike","deleteLike","api"],"mappings":"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","sourcesContent":["class API {\n    constructor({ baseURL, token }) {\n        this._baseURL = baseURL;\n        this._token = token;\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    getUserInfo() {\n        return fetch(`${this._baseURL}/users/me`, {\n            method: 'GET',\n            headers: {\n                authorization: this._token\n            }\n        })\n            .then(this._checkResponse)\n    }\n\n    getInitialCards() {\n        return fetch(`${this._baseURL}/cards`, {\n            method: 'GET',\n            headers: {\n                authorization: this._token\n            }\n        })\n            .then(this._checkResponse)\n    }\n\n    editProfile(data) {\n        console.log(data);\n        return fetch(`${this._baseURL}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    editAvatar(data) {\n        return fetch(`${this._baseURL}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: data.avatar,\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    addCard(data) {\n        return fetch(`${this._baseURL}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    deleteCard(id) {\n        return fetch(`${this._baseURL}/cards/${id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(this._checkResponse)\n    }\n\n    putLike(id) {\n        return fetch(`${this._baseURL}/cards/likes/${id}`, {\n            method: 'PUT',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(this._checkResponse)\n    }\n\n    deleteLike(id) {\n        return fetch(`${this._baseURL}/cards/likes/${id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(this._checkResponse)\n    }\n}\n\nconst api = new API({\n    baseURL: 'https://mesto.nomoreparties.co/v1/cohort-19',\n    token: '368fbfa6-0e9c-41c7-bd15-303b5b8d6ef8',\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}